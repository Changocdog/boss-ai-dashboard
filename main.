<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>BossAI Automation Canvas</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f9;
      color: #333;
    }
    header {
      background-color: #4CAF50;
      color: white;
      padding: 10px;
      text-align: center;
    }
    .canvas-container {
      display: flex;
      flex: 1;
      height: calc(100vh - 60px);
      overflow: hidden;
    }
    .nodes-list {
      width: 200px;
      background-color: #f8f8f8;
      border-right: 1px solid #ddd;
      padding: 10px;
    }
    .nodes-list h3 {
      margin-top: 0;
    }
    .node {
      margin: 10px 0;
      padding: 10px;
      background-color: #fff;
      border: 1px solid #ccc;
      border-radius: 5px;
      cursor: grab;
      text-align: center;
    }
    .node.dragging {
      opacity: 0.5;
    }
    .canvas {
      flex: 1;
      position: relative;
      background-color: #fff;
    }
    .dropped-node {
      position: absolute;
      padding: 10px;
      background-color: #4CAF50;
      color: white;
      border-radius: 5px;
      cursor: grab;
    }
  </style>
</head>
<body>
  <header>
    <h1>BossAI Automation Canvas</h1>
  </header>
  <div class="canvas-container">
    <div class="nodes-list">
      <h3>Nodes</h3>
      <div class="node" draggable="true" data-node-type="Script Writer">Script Writer</div>
      <div class="node" draggable="true" data-node-type="Voiceover">Voiceover</div>
      <div class="node" draggable="true" data-node-type="Logger">Logger</div>
    </div>
    <div class="canvas" id="canvas"></div>
  </div>

  <script>
    const nodes = document.querySelectorAll('.node');
    const canvas = document.getElementById('canvas');
    let draggedNode = null;

    // Drag start
    nodes.forEach(node => {
      node.addEventListener('dragstart', (event) => {
        draggedNode = event.target;
        event.target.classList.add('dragging');
      });
      
      node.addEventListener('dragend', (event) => {
        event.target.classList.remove('dragging');
        draggedNode = null;
      });
    });

    // Allow drop on canvas
    canvas.addEventListener('dragover', (event) => {
      event.preventDefault();
    });

    canvas.addEventListener('drop', (event) => {
      event.preventDefault();
      
      if (draggedNode) {
        const nodeType = draggedNode.getAttribute('data-node-type');
        
        const droppedNode = document.createElement('div');
        droppedNode.className = 'dropped-node';
        droppedNode.textContent = nodeType;
        droppedNode.style.left = `${event.clientX - canvas.offsetLeft}px`;
        droppedNode.style.top = `${event.clientY - canvas.offsetTop}px`;
        canvas.appendChild(droppedNode);
      }
    });
  </script>
</body>
</html>